



1.Projeye Katlanlar Eklenir.
  - Core
  - Entities
  - DataAccess 
  - Bussiness
  - APÝ
  - ilerde Angular ve Test

2.Core Katmanýna IEntiy Eklenir. (Entities Klasörü Altýna)
  - Bu Veritabaný sýnýflarýný Sýnýflamak için Kullanýlacak.
3.Entities katmanýna Concrete Klasörü Eklenir. Bunlar Veritabý Sýnýflarýný Tutmak için ve Ientity Interfaceni miras alýr
Bu sayade tün veritabý nesneleri gruplanýr.
Buraya Veritabýnda Kullanýlacak Sýnýflar Eklenir.

4. Data Access Katmanýna EntitiyFrameworkCore, EntitiyFrameworkCore.SqlServer ( Bu Veritabanýna göre Deðir) ,EntitiyFrameworkCore.Tools Paketleri Yüklenir
Bu Paketler ile sql Server baðlantýsý, migration gibi iþlemler yapýlýr.

5.Data Access Katmanýna Abstract ve Concrete klasörleri Açýlýr. Bunlar Soyut ve Somut Sýnýflarý ayýrmak için.
Sýnýflar ve Interfaceler Bunun içinde Bulunur

6.Core Katmanýna DataAccess Base Repositorylerini Koymak için bir Bir klasör Açýlýr ( Bu tüm Projeler ortak olduðu için Core Katmanýnda)
Bu Klasörün içinde Generic Veritabaný iþlemlerini yapan Metodlar bulunur. Bunlar her Repositorylerde ortak olduðu için Tek bir yerden yönetilir.

7.Core Katamnýnda DataAcces klasörüne IEntityRepository ve EntityRepository Sýnýflarý eklenir. Bunlar Ortak iþlenler için. T generic þeklikde.

8. DataAccess Katmanýna Baðlanmak istediðimiz Sýnýflarýn ýnterface ve Sýnýflarý Yazýlýr (IXXXRepository,XXXXRepository)
Bu Sýnýflar IEntitiyReposity , EntitiyRepository Miras alýr. Burdaki T:XXX OLUR

9.DataAccess Katmanýna  COntetxt Sýnýfý ve Býilderlar eklenir.

10. StartUp'a Çagýrmak Ýstediðimiz DbContext yazýlýr. Bu Servis içinde Connectionstring Appsetting.json'dan alýnýr.
daha sonra migration Komutu Çagrýlýr
 Add-Migration InitialCreate -project StockManagement.DataAccess
 ve Veritabanýna migration Gönderilir.
 update-database

11. Ýþ Katmanýna Gerekli Entitylerin iþ metodlarýný yapacak Soyut ve Somut Sýnýflarý Eklenir.
(ICityService,CityService)

12. Core Katmanýna Sonuçlarý Belirli Ölçekte Stabil Hale getirmek için Result klasörü Eklenir.
IResult,Result SuccessResult,ErrorResult
IDataResult ,DataResult , SuccessDataResult ,ErrorDataResult

13. Daha Sonra Bussiness Katmanýna Veritaný Sýnýfý Ýçin IResult , IData Result Dönen Metodlar Eklenir. GetAll,GetById,Add,Update,Delete..

14. Api Katmanýna ilgili Sýnýfýn Contorolleri eklenir, (Api Controller) -  Daha Sonra Gerekli Metodlar yazýlýr ve Business Katmanýndan Çagrýlýr.

15. Bussines Katmanýna Autofac paketi Yüklenir. Ve içine "DependecyResolver" klasörü açýlýr. Onun Altýna "Autofac" klasörü açýlýr.
ilerde baþka bir IoC container kullanacaðýmýz zaman ona ait klasör açabiliriz.

16. Daha Sonra Autofac klasörü altýna BussinessModule clasý eklenir ve Dependenyler eklenir.

17 Bu Eklenen Modulu program.cs de tanýtmak için gerekli kod eklenir.
.UseServiceProviderFactory(new AutofacServiceProviderFactory(builder=>builder.RegisterModule(new BusinessModule())))

18. 

